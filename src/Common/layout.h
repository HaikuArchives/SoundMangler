/*

Some stuff I need to build a layout engine...

*/

#ifndef _LAYOUT_H
#define _LAYOUT_H

#include <stdlib.h>

#ifndef min
#define min(a,b) ((a)<(b)?(a):(b))
#endif

#ifndef max
#define max(a,b) ((a)>(b)?(a):(b))
#endif

// use macro to make code slightly more readable
#define MVPTR(x) dynamic_cast<MView*>(x)


class minimax	// Order now, by dialing the number on your screen!
{
	public:		BPoint	mini;
				BPoint	maxi;
				float	weight;
				
				minimax(int minx=0,int miny=0,
						int maxx=65536,int maxy=65536,
						float wght=1);
				minimax(BPoint min,BPoint max,float wght=1);
};


class MView
{
	protected:	rgb_color	FILL_COLOR;
				rgb_color	LOW_COLOR;
				rgb_color	HI_COLOR;

	public:		BRect	lastsize;
				minimax	mpm;		// something to store my sizes in
				minimax ct_mpm;		// size specified at construction-time
				ulong	flags;		// various flags, upper 16 bits are reserved

				MView();
				virtual ~MView();
				virtual	minimax	layoutprefs()=0;
				virtual BRect	layout(BRect rect)=0;
				virtual void	reloadfont();
				virtual void	setcolor(rgb_color col, bool deep=true);
					rgb_color	getcolor() {return FILL_COLOR;};
						void	setcolor(uchar red, uchar green, uchar blue, bool deep=true);
};



// constants used in messaging all start with a '!'
#define M_POPUP_SELECTED		'!pop'
#define M_CHECKBOX_SELECTED		'!chk'
#define M_BUTTON_SELECTED		'!but'
#define M_RADIO_SELECTED 		'!rad'
#define M_PLAYBW_SELECTED		'!ylp'
#define M_PLAYFW_SELECTED		'!ply'
#define M_FFWD_SELECTED			'!fwd'
#define M_REW_SELECTED 			'!rwd'
#define M_STOP_SELECTED			'!stp'
#define M_VOLUME_CHANGED		'!vol'
#define M_EJECT_SELECTED		'!ejt'
#define M_STATUSBAR_CLICKED		'!sbc'
#define M_STATUSBAR_DRAGGED		'!sbd'
#define M_STATUSBAR_RELEASED	'!sbr'
#define M_ACTIVATE_LAYER		'!lyr'

// font-change message is understood by MWindow and MApplication,
// but is not generated by liblayout.
#define M_FONT_CHANGED			'!FNT'

extern rgb_color M_FILL_COLOR;
extern rgb_color M_LOW_COLOR;
extern rgb_color M_HI_COLOR;
extern rgb_color BLACK_COLOR;
#define PARENT_COLOR Parent()->ViewColor()

void SetDefaultColors(uchar red, uchar green, uchar blue);
void SetDefaultColors(rgb_color cs);

// misc flags
// note that not all controls responds to all flags

enum{
	M_REPORT_IMMEDIATE=			0x00010000,		// report first click on control
	M_REPORT_REPEAT	=			0x00020000,		// report if control is clicked and held
	M_REPORT_RELEASE=			0x00040000,		// report release of button over control
	M_REPORT_RELEASE_ALWAYS=	0x00080000,		// always report release of button
	M_REPORT_MASK=				0x000f0000,		// all of the above
	
	// mostly for internal use, therefore not documented (yet)
	M_USE_CALCULATED_MINX=		0x00100000,
	M_USE_CALCULATED_MINY=		0x00200000,
	M_USE_CALCULATED_MAXX=		0x00400000,
	M_USE_CALCULATED_MAXY=		0x00800000,
	M_NO_COLOR_CHANGES=			0x20000000, // don't listen to color-drop messages
	M_NO_FONT_CHANGES=			0x40000000, // don't listen to font-change messages
	M_USE_FULL_SIZE	=		(int)0x80000000	// don't respect max-size (set for grouping classes)
};


#endif
